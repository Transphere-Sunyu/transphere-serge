

sync
{
    # `ts` defines which translation service
    # to synchronize translation files with
    ts
    {
        # (STRING) TS plugin name
        plugin                      command

        # [OPTIONAL] Plugin data
        data
        {
            project_id              4945



        }
    }

    # connection parameters for a remote source control repository
    vcs
    {
        # (STRING) VCS plugin name
        plugin                      git

        data
        {
            # (STRING) Absolute path to local folder where local checkout will be stored.
            local_path              C:\Users\JohnCurtis\Desktop\serge\serge-1.4\checkout

            /*
            As you can see from the line above, one can use `%ENV:SOMEVAR%` macro
            anywhere in the string â€” it will be substituted with the value
            of the `SOMEVAR` environment variable; if the variable with that name
            is not defined, the script will fail with the corresponding message.
            This allows to use the same configuration file in different environments
            (e.g. different developers' and build machines) or to reuse
            common configuration parameters across multiple configuration files.
            */


            remote_path
            {
                # one can specify branch name after the '#'.
                # if no branch is specified, `main` branch is used by default

                main                https://github.com/Transphere-Sunyu/l10n-react.git
            }

            # (BOOLEAN) [OPTIONAL] should the newly generated
            # files be added to the remote repository automatically?
            add_unversioned         YES

            # (STRING) [OPTIONAL] Commit message

            commit_message          Automatic commit of translation files

            name                    Transphere

            email                   johnoula@antratechstudios.com
        }
    }
}

# `jobs` block represents an ordered list of localization jobs to process.
jobs
{
    # First job definition
    {
        # (STRING) Unique job identifier string.
        id                          unique.job.identifier.string

        # (this is used only for logging purposes)
        name                        Job Test 1


        # (set this to NO when you want all files to be parsed unconditionally)
        optimizations               YES


        active                      YES


        debug                       YES

        # (BOOLEAN) [OPTIONAL] Disable saving any files

        debug_nosave                NO

        # (BOOLEAN) [OPTIONAL] Only produce output files: do not parse or
        # generate translation files, do not update database
        # with source strings or translations

        output_only_mode            NO

        source_language             en

        # (ARRAY) Destination (generated) languages.
        # There should be at least one destination language defined.
        destination_languages       zh

        source_dir                  ../checkout/main/src/locales/



        # YES - subdirectories are processed
        # NO - subdirectories are not processed (default)
        source_process_subdirs      NO

        # (ARRAY) List of regular expressions for the file name
        # to match the files that should be processed.

        source_match                \.json$

        # (ARRAY) [OPTIONAL]
        source_exclude_dirs ^(\.svn|\.git|\.hg|\.bzr|CVS)$

        # (ARRAY) [OPTIONAL]
        source_exclude              \.internal\.rc$

        # Parser plugin definition
        parser
        {
            # (STRING) Parser class name.
            # See Serge/Engine/Plugin/parse_*.pm files
            plugin                  parse_rc

            # [OPTIONAL]
            data
            {
                #param1             value1
                #param2             value2
            }
        }

        # [OPTIONAL] Serializer plugin definition
        # If this entire block is omitted, the default serializer plugin is used
        # (serialize_po) for backward compatibility
        serializer
        {
            # (STRING) Serializer class name.
            # See Serge/Engine/Plugin/serialize_*.pm files
            plugin                  serialize_po

            # [OPTIONAL]
            data
            {
                #param1             value1
                #param2             value2
            }
        }

        # (BOOLEAN) [OPTIONAL] Should the strings be normalized, i.e. trimmed
        # and converted to single line with no double-spaces?

        normalize_strings           NO

        # (BOOLEAN) [OPTIONAL]
        use_keys_as_context         NO

        # (BOOLEAN) [OPTIONAL]
        leave_untranslated_blank    NO

        # (STRING) DBI-compatible connection string
        # Supported drivers: SQLite, MySQL and Postgres
        # SQLite sample: 'DBI:SQLite:dbname=/path/to/translate.db3'
        # SQLite sample: 'DBI:SQLite:dbname=:memory:' - in-memory database
        # for testing purposes
        # MySQL sample: 'DBI:mysql:database=translations'
        # MySQL sample: 'DBI:mysql:database=translations;host=localhost;port=3306'

        db_source                   DBI:SQLite:dbname=./translate.db3

        # (STRING) [OPTIONAL]
        db_username                 l10n

        # (STRING) [OPTIONAL]
        db_password                 secretword

        # (STRING) Internal namespace(project) to register files under in the database.

        db_namespace                starling

        # (STRING) Path to output translation files, relative to the config file or absolute
        # (currently translation files are generated only in the .po format)
        ts_file_path                ./translations/%LANG%/%LOCALE%.po

        /*
        In the parameter above, the following macros are allowed:

        %ENV:WHATEVER%  -  gets substituted with `WHATEVER' environment variable,
                           or dies if it is not set. This allows to define parameters
                           externally without modifying the config file itself.

        %PATH%           - file path including trailing path delimiter
        %NAME%           - file name without extension
                           (the rightmost dot is used to split name and extension)
        %EXT%            - extension (the rightmost dot is used to split
                           name and extension)
        %LNAME%          - file name without extension
                           (the leftmost dot is used to split name and extension)
        %LEXT%           - extension (the leftmost dot is used to split name and extension)
        %NAME:NAME%      - split the %NAME% using the rightmost dot and take the left part
        %NAME:EXT%       - split the %NAME% using the rightmost dot and take the right part
        %NAME:LNAME%     - split the %NAME% using the leftmost dot and take the left part
        %NAME:LEXT%      - split the %NAME% using the leftmost dot and take the right part
                           (%NAME% is equivalent to %NAME:NAME%.%NAME:EXT%)

        %LNAME:NOLOCALE% - take %LNAME% and strip the source locale '_XX' suffix
                           (e.g. '_en')
        %NAME:NOLOCALE%  - take %NAME% and strip the source locale '_XX' suffix
                           (e.g. '_en')

        %FILE%           - original file name including full path
                           (equivalent to %PATH%%NAME%.%EXT% or %PATH%%LNAME%.%LEXT%)

        %LANG%           - language tag (e.g. 'en', 'ru', 'pt-br')
        %CULTURE%        - culture tag (e.g. 'en-US', 'ru-RU', 'pt-BR')
        %LOCALE%         - locale name (e.g. 'en', 'ru', 'pt_BR')
        %LOCALE:ANDROID% - locale name as used on Android (e.g. 'en', 'ru', 'pt-rBR')
        %LOCALE:IPHONE%  - locale name as used on iPhone
                           (**DEPRECATED**, use %LANG% instead + `output_lang_rewrite`)
        %LOCALE:LC%      - a lowercased locale name (e.g. 'en', 'ru', 'pt_br')
        %LOCALE:UC%      - an uppercased locale name (e.g. 'EN', 'RU', 'PT_BR')
        %LOCALE:FULL%    - full locale with country name (e.g. 'en_US', 'ru_RU', 'pt_BR')
        %LOCALE:FULL:LC% - same as above, but lowercased
        %LOCALE:FULL:UC% - same as above, but uppercased
        %LANGNAME%       - full language name (e.g. 'English', 'Russian') used in Mac
                           (**LEGACY, DEPRECATED**)
        %LANGNAME:IPHONE%- full language name (e.g. 'English', 'Russian') used in iPhone
                           (**LEGACY, DEPRECATED**)
        %LANGID%         - Win32 laguage locale as 4-digit hex value (e.g. '0419')
        %LANGID:DEC%     - Win32 laguage locale as decimal value (e.g. '1049')
        %LANGCONST%      - Win32 LANG_ constant (e.g. 'LANG_RUSSIAN')
        %SUBLANGCONST%   - Win32 SUBLANG_ constant (e.g 'SUBLANG_RUSSIAN_RUSSIA')
        %AFXTARGCONST%   - Win32 AFX_TARG_ constant (e.g. 'AFX_TARG_RUS')
        %CODEPAGE%       - Win32 codepage (e.g. '1251')
        */

        # (BOOLEAN) [OPTIONAL] Should the language-specific files be created
        # from each target language (see `destination_languages` parameter)?

        output_lang_files           NO

        # (BOOLEAN) [OPTIONAL]
        # Note: This option is handy when the source file is not the final localizable
        # resource to use but rather a template that has to be preprocessed.
        # See e.g. the `parse_master` parser and its `.master` template file format
        # that allows one to mark up unstructured plain text files for translation
        output_default_lang_file    NO

        # (STRING) [OPTIONAL]
        # This value has effect only if `output_lang_files` or `output_default_lang_file`
        # parameters are set to YES
        output_encoding             UCS-2LE

        # (BOOLEAN) [OPTIONAL] Should the BOM ("byte order mark")
        # be emitted at the beginning of the output file?

        output_bom                  YES

        # [OPTIONAL] Map telling to use different language name in language macros
        # (see the list of available macros in `ts_file_path` parameter description)
        # and when constructing output path (see `output_file_path` parameter).
        # This allows to tweak language/locale names for different projects.
        output_lang_rewrite
        {
            no                      nb
        }

        # (STRING)
        # This value has effect only if `output_lang_files` or `output_default_lang_file`
        # parameters are set to YES
        output_file_path            ./%LOCALE%


    }
}